trigger:
- main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  dockerfilePath: '$(Build.SourcesDirectory)/dockerfile'
  imageName: 'yourappname'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Push image to container registry
      inputs:
        command: push
        containerRegistry: 'YourContainerRegistryConnection'
        repository: $(imageName)
        tags: |
          $(tag)

- stage: Test
  displayName: Test
  jobs:
  - job: Test
    displayName: Run tests
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Run tests in container
      inputs:
        command: run
        containerRegistry: 'YourContainerRegistryConnection'
        image: '$(imageName):$(tag)'
        arguments: 'run your-test-command'

- stage: Deploy
  displayName: Deploy to production
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      vmImage: ubuntu-latest
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: 'Deploy to Kubernetes'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                dockerauth
              containers: |
                $(containerRegistry)/$(imageName):$(tag)